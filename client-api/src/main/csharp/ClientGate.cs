// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class ClientGate {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_Position__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::Position, global::Position.Builder> internal__static_Position__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ModInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ModInfo, global::ModInfo.Builder> internal__static_ModInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_MotionInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::MotionInfo, global::MotionInfo.Builder> internal__static_MotionInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SurvivalInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SurvivalInfo, global::SurvivalInfo.Builder> internal__static_SurvivalInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_IdentifyInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::IdentifyInfo, global::IdentifyInfo.Builder> internal__static_IdentifyInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_Item__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::Item, global::Item.Builder> internal__static_Item__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_Character__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::Character, global::Character.Builder> internal__static_Character__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ClientCommonResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ClientCommonResponse, global::ClientCommonResponse.Builder> internal__static_ClientCommonResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_UserLoginRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::UserLoginRequest, global::UserLoginRequest.Builder> internal__static_UserLoginRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_UserLoginResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::UserLoginResponse, global::UserLoginResponse.Builder> internal__static_UserLoginResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_UserLogoutRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::UserLogoutRequest, global::UserLogoutRequest.Builder> internal__static_UserLogoutRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_UserLogoutResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::UserLogoutResponse, global::UserLogoutResponse.Builder> internal__static_UserLogoutResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_GetCharacterInfoRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::GetCharacterInfoRequest, global::GetCharacterInfoRequest.Builder> internal__static_GetCharacterInfoRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_GetCharacterInfoResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::GetCharacterInfoResponse, global::GetCharacterInfoResponse.Builder> internal__static_GetCharacterInfoResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ItemMoveEvent__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ItemMoveEvent, global::ItemMoveEvent.Builder> internal__static_ItemMoveEvent__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ItemCraateEvent__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ItemCraateEvent, global::ItemCraateEvent.Builder> internal__static_ItemCraateEvent__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ItemDestroyEvent__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ItemDestroyEvent, global::ItemDestroyEvent.Builder> internal__static_ItemDestroyEvent__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CharacterCreateEvent__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CharacterCreateEvent, global::CharacterCreateEvent.Builder> internal__static_CharacterCreateEvent__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CharacterMove__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CharacterMove, global::CharacterMove.Builder> internal__static_CharacterMove__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static ClientGate() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CiBzcmMvbWFpbi9wcm90by9jbGllbnRfZ2F0ZS5wcm90byI0CghQb3NpdGlv", 
          "bhIMCgRwb3NYGAEgAigFEgwKBHBvc1kYAiACKAUSDAoEcG9zWhgDIAIoBSI9", 
          "CgdNb2RJbmZvEg0KBW1vZElkGAEgAigFEg4KBm1vdGlvbhgCIAIoBRITCgtv", 
          "cmllbnRhdGlvbhgDIAIoBSI7CgpNb3Rpb25JbmZvEg4KBm1vdGlvbhgBIAIo", 
          "BRIOCgZlZmZlY3QYAiACKAUSDQoFc3BlZWQYAyACKAIiPQoMU3Vydml2YWxJ", 
          "bmZvEg4KBmhlYXJ0aBgBIAIoBRIOCgZodW5ncnkYAiACKAUSDQoFdGlyZWQY", 
          "AyACKAUiQQoMSWRlbnRpZnlJbmZvEgoKAklEGAEgAigJEgwKBG5hbWUYAiAC", 
          "KAkSFwoEdHlwZRgDIAIoDjIJLkl0ZW1UeXBlIoQBCgRJdGVtEh8KCGlkZW50", 
          "aWZ5GAEgAigLMg0uSWRlbnRpZnlJbmZvEhsKCHBvc2l0aW9uGAIgAigLMgku", 
          "UG9zaXRpb24SGQoHbW9kSW5mbxgDIAIoCzIILk1vZEluZm8SIwoMc3Vydml2", 
          "YWxJbmZvGAQgAigLMg0uU3Vydml2YWxJbmZvIokBCglDaGFyYWN0ZXISHwoI", 
          "aWRlbnRpZnkYASACKAsyDS5JZGVudGlmeUluZm8SGwoIcG9zaXRpb24YAiAC", 
          "KAsyCS5Qb3NpdGlvbhIZCgdtb2RJbmZvGAMgAigLMgguTW9kSW5mbxIjCgxz", 
          "dXJ2aXZhbEluZm8YBCACKAsyDS5TdXJ2aXZhbEluZm8iMQoUQ2xpZW50Q29t", 
          "bW9uUmVzcG9uc2USGQoEc3RhdBgBIAIoDjILLkNvbW1vblN0YXQiLwoQVXNl", 
          "ckxvZ2luUmVxdWVzdBINCgV1bmFtZRgBIAIoCRIMCgR1cHdkGAIgAigJIj0K", 
          "EVVzZXJMb2dpblJlc3BvbnNlEhgKBGNvZGUYASACKA4yCi5Mb2dpbkNvZGUS", 
          "DgoGdGlja2V0GAIgAigJIiMKEVVzZXJMb2dvdXRSZXF1ZXN0Eg4KBnRpY2tl", 
          "dBgBIAIoCSIuChJVc2VyTG9nb3V0UmVzcG9uc2USGAoEY29kZRgBIAIoDjIK", 
          "LkxvZ2luQ29kZSIpChdHZXRDaGFyYWN0ZXJJbmZvUmVxdWVzdBIOCgZ0aWNr", 
          "ZXQYASACKAkiOQoYR2V0Q2hhcmFjdGVySW5mb1Jlc3BvbnNlEh0KCWNoYXJh", 
          "Y3RlchgBIAIoCzIKLkNoYXJhY3RlciKWAQoNSXRlbU1vdmVFdmVudBIfCghp", 
          "ZGVudGlmeRgBIAMoCzINLklkZW50aWZ5SW5mbxIaCgdmcm9tUG9zGAIgAygL", 
          "MgkuUG9zaXRpb24SGAoFdG9Qb3MYAyADKAsyCS5Qb3NpdGlvbhINCgVzcGVl", 
          "ZBgEIAMoAhIfCgpwbGF5TW90aW9uGAUgAygLMgsuTW90aW9uSW5mbyImCg9J", 
          "dGVtQ3JhYXRlRXZlbnQSEwoEaXRlbRgBIAMoCzIFLkl0ZW0iMwoQSXRlbURl", 
          "c3Ryb3lFdmVudBIfCghpZGVudGlmeRgBIAMoCzINLklkZW50aWZ5SW5mbyI1", 
          "ChRDaGFyYWN0ZXJDcmVhdGVFdmVudBIdCgljaGFyYWN0ZXIYASADKAsyCi5D", 
          "aGFyYWN0ZXIiOQoNQ2hhcmFjdGVyTW92ZRIOCgZ0aWNrZXQYASACKAkSGAoF", 
          "dG9Qb3MYAiACKAsyCS5Qb3NpdGlvbipACglMb2dpbkNvZGUSBwoDU1VDEAAS", 
          "DQoJRVJST1JfUFdEEAESDAoIT0NDVVBJRUQQAhINCglOT1RfRVhJU1QQAyof", 
          "CgpDb21tb25TdGF0EgYKAk9LEAASCQoFRVJST1IQASojCghJdGVtVHlwZRIJ", 
          "CgVCVUlMRBAAEgwKCE1BVEVSSUFMEAEywwEKEVNlcnZlckdhdGVTZXJ2aWNl", 
          "EjIKCXVzZXJMb2dpbhIRLlVzZXJMb2dpblJlcXVlc3QaEi5Vc2VyTG9naW5S", 
          "ZXNwb25zZRI1Cgp1c2VyTG9nb3V0EhIuVXNlckxvZ291dFJlcXVlc3QaEy5V", 
          "c2VyTG9nb3V0UmVzcG9uc2USQwoMZ2V0Q2hhcmFjdGVyEhguR2V0Q2hhcmFj", 
          "dGVySW5mb1JlcXVlc3QaGS5HZXRDaGFyYWN0ZXJJbmZvUmVzcG9uc2UyRAoR", 
          "Q2xpZW50U2lkZVNlcnZpY2USLwoGbW92ZVRvEg4uQ2hhcmFjdGVyTW92ZRoV", 
          "LkNsaWVudENvbW1vblJlc3BvbnNlQiwKDmNvbS5tbW8uc2VydmVyQhRTZXJ2", 
        "ZXJDbGllbnRQcm90b2NvbIgBAaABAQ=="));
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_Position__Descriptor = Descriptor.MessageTypes[0];
      internal__static_Position__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::Position, global::Position.Builder>(internal__static_Position__Descriptor,
              new string[] { "PosX", "PosY", "PosZ", });
      internal__static_ModInfo__Descriptor = Descriptor.MessageTypes[1];
      internal__static_ModInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ModInfo, global::ModInfo.Builder>(internal__static_ModInfo__Descriptor,
              new string[] { "ModId", "Motion", "Orientation", });
      internal__static_MotionInfo__Descriptor = Descriptor.MessageTypes[2];
      internal__static_MotionInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::MotionInfo, global::MotionInfo.Builder>(internal__static_MotionInfo__Descriptor,
              new string[] { "Motion", "Effect", "Speed", });
      internal__static_SurvivalInfo__Descriptor = Descriptor.MessageTypes[3];
      internal__static_SurvivalInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SurvivalInfo, global::SurvivalInfo.Builder>(internal__static_SurvivalInfo__Descriptor,
              new string[] { "Hearth", "Hungry", "Tired", });
      internal__static_IdentifyInfo__Descriptor = Descriptor.MessageTypes[4];
      internal__static_IdentifyInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::IdentifyInfo, global::IdentifyInfo.Builder>(internal__static_IdentifyInfo__Descriptor,
              new string[] { "ID", "Name", "Type", });
      internal__static_Item__Descriptor = Descriptor.MessageTypes[5];
      internal__static_Item__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::Item, global::Item.Builder>(internal__static_Item__Descriptor,
              new string[] { "Identify", "Position", "ModInfo", "SurvivalInfo", });
      internal__static_Character__Descriptor = Descriptor.MessageTypes[6];
      internal__static_Character__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::Character, global::Character.Builder>(internal__static_Character__Descriptor,
              new string[] { "Identify", "Position", "ModInfo", "SurvivalInfo", });
      internal__static_ClientCommonResponse__Descriptor = Descriptor.MessageTypes[7];
      internal__static_ClientCommonResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ClientCommonResponse, global::ClientCommonResponse.Builder>(internal__static_ClientCommonResponse__Descriptor,
              new string[] { "Stat", });
      internal__static_UserLoginRequest__Descriptor = Descriptor.MessageTypes[8];
      internal__static_UserLoginRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::UserLoginRequest, global::UserLoginRequest.Builder>(internal__static_UserLoginRequest__Descriptor,
              new string[] { "Uname", "Upwd", });
      internal__static_UserLoginResponse__Descriptor = Descriptor.MessageTypes[9];
      internal__static_UserLoginResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::UserLoginResponse, global::UserLoginResponse.Builder>(internal__static_UserLoginResponse__Descriptor,
              new string[] { "Code", "Ticket", });
      internal__static_UserLogoutRequest__Descriptor = Descriptor.MessageTypes[10];
      internal__static_UserLogoutRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::UserLogoutRequest, global::UserLogoutRequest.Builder>(internal__static_UserLogoutRequest__Descriptor,
              new string[] { "Ticket", });
      internal__static_UserLogoutResponse__Descriptor = Descriptor.MessageTypes[11];
      internal__static_UserLogoutResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::UserLogoutResponse, global::UserLogoutResponse.Builder>(internal__static_UserLogoutResponse__Descriptor,
              new string[] { "Code", });
      internal__static_GetCharacterInfoRequest__Descriptor = Descriptor.MessageTypes[12];
      internal__static_GetCharacterInfoRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::GetCharacterInfoRequest, global::GetCharacterInfoRequest.Builder>(internal__static_GetCharacterInfoRequest__Descriptor,
              new string[] { "Ticket", });
      internal__static_GetCharacterInfoResponse__Descriptor = Descriptor.MessageTypes[13];
      internal__static_GetCharacterInfoResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::GetCharacterInfoResponse, global::GetCharacterInfoResponse.Builder>(internal__static_GetCharacterInfoResponse__Descriptor,
              new string[] { "Character", });
      internal__static_ItemMoveEvent__Descriptor = Descriptor.MessageTypes[14];
      internal__static_ItemMoveEvent__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ItemMoveEvent, global::ItemMoveEvent.Builder>(internal__static_ItemMoveEvent__Descriptor,
              new string[] { "Identify", "FromPos", "ToPos", "Speed", "PlayMotion", });
      internal__static_ItemCraateEvent__Descriptor = Descriptor.MessageTypes[15];
      internal__static_ItemCraateEvent__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ItemCraateEvent, global::ItemCraateEvent.Builder>(internal__static_ItemCraateEvent__Descriptor,
              new string[] { "Item", });
      internal__static_ItemDestroyEvent__Descriptor = Descriptor.MessageTypes[16];
      internal__static_ItemDestroyEvent__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ItemDestroyEvent, global::ItemDestroyEvent.Builder>(internal__static_ItemDestroyEvent__Descriptor,
              new string[] { "Identify", });
      internal__static_CharacterCreateEvent__Descriptor = Descriptor.MessageTypes[17];
      internal__static_CharacterCreateEvent__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CharacterCreateEvent, global::CharacterCreateEvent.Builder>(internal__static_CharacterCreateEvent__Descriptor,
              new string[] { "Character", });
      internal__static_CharacterMove__Descriptor = Descriptor.MessageTypes[18];
      internal__static_CharacterMove__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CharacterMove, global::CharacterMove.Builder>(internal__static_CharacterMove__Descriptor,
              new string[] { "Ticket", "ToPos", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        }, assigner);
  }
  #endregion
  
}
#region Enums
public enum LoginCode {
  SUC = 0,
  ERROR_PWD = 1,
  OCCUPIED = 2,
  NOT_EXIST = 3,
}

public enum CommonStat {
  OK = 0,
  ERROR = 1,
}

public enum ItemType {
  BUILD = 0,
  MATERIAL = 1,
}

#endregion

#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Position : pb::GeneratedMessage<Position, Position.Builder> {
  private Position() { }
  private static readonly Position defaultInstance = new Position().MakeReadOnly();
  private static readonly string[] _positionFieldNames = new string[] { "posX", "posY", "posZ" };
  private static readonly uint[] _positionFieldTags = new uint[] { 8, 16, 24 };
  public static Position DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override Position DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override Position ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_Position__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<Position, Position.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_Position__FieldAccessorTable; }
  }
  
  public const int PosXFieldNumber = 1;
  private bool hasPosX;
  private int posX_;
  public bool HasPosX {
    get { return hasPosX; }
  }
  public int PosX {
    get { return posX_; }
  }
  
  public const int PosYFieldNumber = 2;
  private bool hasPosY;
  private int posY_;
  public bool HasPosY {
    get { return hasPosY; }
  }
  public int PosY {
    get { return posY_; }
  }
  
  public const int PosZFieldNumber = 3;
  private bool hasPosZ;
  private int posZ_;
  public bool HasPosZ {
    get { return hasPosZ; }
  }
  public int PosZ {
    get { return posZ_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPosX) return false;
      if (!hasPosY) return false;
      if (!hasPosZ) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _positionFieldNames;
    if (hasPosX) {
      output.WriteInt32(1, field_names[0], PosX);
    }
    if (hasPosY) {
      output.WriteInt32(2, field_names[1], PosY);
    }
    if (hasPosZ) {
      output.WriteInt32(3, field_names[2], PosZ);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPosX) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, PosX);
    }
    if (hasPosY) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, PosY);
    }
    if (hasPosZ) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, PosZ);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static Position ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Position ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Position ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Position ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Position ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Position ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static Position ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static Position ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static Position ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Position ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private Position MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(Position prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<Position, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(Position cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private Position result;
    
    private Position PrepareBuilder() {
      if (resultIsReadOnly) {
        Position original = result;
        result = new Position();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override Position MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::Position.Descriptor; }
    }
    
    public override Position DefaultInstanceForType {
      get { return global::Position.DefaultInstance; }
    }
    
    public override Position BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is Position) {
        return MergeFrom((Position) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(Position other) {
      if (other == global::Position.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPosX) {
        PosX = other.PosX;
      }
      if (other.HasPosY) {
        PosY = other.PosY;
      }
      if (other.HasPosZ) {
        PosZ = other.PosZ;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_positionFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _positionFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPosX = input.ReadInt32(ref result.posX_);
            break;
          }
          case 16: {
            result.hasPosY = input.ReadInt32(ref result.posY_);
            break;
          }
          case 24: {
            result.hasPosZ = input.ReadInt32(ref result.posZ_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPosX {
      get { return result.hasPosX; }
    }
    public int PosX {
      get { return result.PosX; }
      set { SetPosX(value); }
    }
    public Builder SetPosX(int value) {
      PrepareBuilder();
      result.hasPosX = true;
      result.posX_ = value;
      return this;
    }
    public Builder ClearPosX() {
      PrepareBuilder();
      result.hasPosX = false;
      result.posX_ = 0;
      return this;
    }
    
    public bool HasPosY {
      get { return result.hasPosY; }
    }
    public int PosY {
      get { return result.PosY; }
      set { SetPosY(value); }
    }
    public Builder SetPosY(int value) {
      PrepareBuilder();
      result.hasPosY = true;
      result.posY_ = value;
      return this;
    }
    public Builder ClearPosY() {
      PrepareBuilder();
      result.hasPosY = false;
      result.posY_ = 0;
      return this;
    }
    
    public bool HasPosZ {
      get { return result.hasPosZ; }
    }
    public int PosZ {
      get { return result.PosZ; }
      set { SetPosZ(value); }
    }
    public Builder SetPosZ(int value) {
      PrepareBuilder();
      result.hasPosZ = true;
      result.posZ_ = value;
      return this;
    }
    public Builder ClearPosZ() {
      PrepareBuilder();
      result.hasPosZ = false;
      result.posZ_ = 0;
      return this;
    }
  }
  static Position() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ModInfo : pb::GeneratedMessage<ModInfo, ModInfo.Builder> {
  private ModInfo() { }
  private static readonly ModInfo defaultInstance = new ModInfo().MakeReadOnly();
  private static readonly string[] _modInfoFieldNames = new string[] { "modId", "motion", "orientation" };
  private static readonly uint[] _modInfoFieldTags = new uint[] { 8, 16, 24 };
  public static ModInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ModInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ModInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_ModInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ModInfo, ModInfo.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_ModInfo__FieldAccessorTable; }
  }
  
  public const int ModIdFieldNumber = 1;
  private bool hasModId;
  private int modId_;
  public bool HasModId {
    get { return hasModId; }
  }
  public int ModId {
    get { return modId_; }
  }
  
  public const int MotionFieldNumber = 2;
  private bool hasMotion;
  private int motion_;
  public bool HasMotion {
    get { return hasMotion; }
  }
  public int Motion {
    get { return motion_; }
  }
  
  public const int OrientationFieldNumber = 3;
  private bool hasOrientation;
  private int orientation_;
  public bool HasOrientation {
    get { return hasOrientation; }
  }
  public int Orientation {
    get { return orientation_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasModId) return false;
      if (!hasMotion) return false;
      if (!hasOrientation) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _modInfoFieldNames;
    if (hasModId) {
      output.WriteInt32(1, field_names[0], ModId);
    }
    if (hasMotion) {
      output.WriteInt32(2, field_names[1], Motion);
    }
    if (hasOrientation) {
      output.WriteInt32(3, field_names[2], Orientation);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasModId) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, ModId);
    }
    if (hasMotion) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Motion);
    }
    if (hasOrientation) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Orientation);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ModInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ModInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ModInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ModInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ModInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ModInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ModInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ModInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ModInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ModInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ModInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ModInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ModInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ModInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ModInfo result;
    
    private ModInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        ModInfo original = result;
        result = new ModInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ModInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ModInfo.Descriptor; }
    }
    
    public override ModInfo DefaultInstanceForType {
      get { return global::ModInfo.DefaultInstance; }
    }
    
    public override ModInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ModInfo) {
        return MergeFrom((ModInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ModInfo other) {
      if (other == global::ModInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasModId) {
        ModId = other.ModId;
      }
      if (other.HasMotion) {
        Motion = other.Motion;
      }
      if (other.HasOrientation) {
        Orientation = other.Orientation;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_modInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _modInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasModId = input.ReadInt32(ref result.modId_);
            break;
          }
          case 16: {
            result.hasMotion = input.ReadInt32(ref result.motion_);
            break;
          }
          case 24: {
            result.hasOrientation = input.ReadInt32(ref result.orientation_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasModId {
      get { return result.hasModId; }
    }
    public int ModId {
      get { return result.ModId; }
      set { SetModId(value); }
    }
    public Builder SetModId(int value) {
      PrepareBuilder();
      result.hasModId = true;
      result.modId_ = value;
      return this;
    }
    public Builder ClearModId() {
      PrepareBuilder();
      result.hasModId = false;
      result.modId_ = 0;
      return this;
    }
    
    public bool HasMotion {
      get { return result.hasMotion; }
    }
    public int Motion {
      get { return result.Motion; }
      set { SetMotion(value); }
    }
    public Builder SetMotion(int value) {
      PrepareBuilder();
      result.hasMotion = true;
      result.motion_ = value;
      return this;
    }
    public Builder ClearMotion() {
      PrepareBuilder();
      result.hasMotion = false;
      result.motion_ = 0;
      return this;
    }
    
    public bool HasOrientation {
      get { return result.hasOrientation; }
    }
    public int Orientation {
      get { return result.Orientation; }
      set { SetOrientation(value); }
    }
    public Builder SetOrientation(int value) {
      PrepareBuilder();
      result.hasOrientation = true;
      result.orientation_ = value;
      return this;
    }
    public Builder ClearOrientation() {
      PrepareBuilder();
      result.hasOrientation = false;
      result.orientation_ = 0;
      return this;
    }
  }
  static ModInfo() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MotionInfo : pb::GeneratedMessage<MotionInfo, MotionInfo.Builder> {
  private MotionInfo() { }
  private static readonly MotionInfo defaultInstance = new MotionInfo().MakeReadOnly();
  private static readonly string[] _motionInfoFieldNames = new string[] { "effect", "motion", "speed" };
  private static readonly uint[] _motionInfoFieldTags = new uint[] { 16, 8, 29 };
  public static MotionInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override MotionInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override MotionInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_MotionInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<MotionInfo, MotionInfo.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_MotionInfo__FieldAccessorTable; }
  }
  
  public const int MotionFieldNumber = 1;
  private bool hasMotion;
  private int motion_;
  public bool HasMotion {
    get { return hasMotion; }
  }
  public int Motion {
    get { return motion_; }
  }
  
  public const int EffectFieldNumber = 2;
  private bool hasEffect;
  private int effect_;
  public bool HasEffect {
    get { return hasEffect; }
  }
  public int Effect {
    get { return effect_; }
  }
  
  public const int SpeedFieldNumber = 3;
  private bool hasSpeed;
  private float speed_;
  public bool HasSpeed {
    get { return hasSpeed; }
  }
  public float Speed {
    get { return speed_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasMotion) return false;
      if (!hasEffect) return false;
      if (!hasSpeed) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _motionInfoFieldNames;
    if (hasMotion) {
      output.WriteInt32(1, field_names[1], Motion);
    }
    if (hasEffect) {
      output.WriteInt32(2, field_names[0], Effect);
    }
    if (hasSpeed) {
      output.WriteFloat(3, field_names[2], Speed);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasMotion) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Motion);
    }
    if (hasEffect) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Effect);
    }
    if (hasSpeed) {
      size += pb::CodedOutputStream.ComputeFloatSize(3, Speed);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static MotionInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MotionInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MotionInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MotionInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MotionInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MotionInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static MotionInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static MotionInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static MotionInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MotionInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private MotionInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(MotionInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<MotionInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(MotionInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private MotionInfo result;
    
    private MotionInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        MotionInfo original = result;
        result = new MotionInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override MotionInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::MotionInfo.Descriptor; }
    }
    
    public override MotionInfo DefaultInstanceForType {
      get { return global::MotionInfo.DefaultInstance; }
    }
    
    public override MotionInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is MotionInfo) {
        return MergeFrom((MotionInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(MotionInfo other) {
      if (other == global::MotionInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMotion) {
        Motion = other.Motion;
      }
      if (other.HasEffect) {
        Effect = other.Effect;
      }
      if (other.HasSpeed) {
        Speed = other.Speed;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_motionInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _motionInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasMotion = input.ReadInt32(ref result.motion_);
            break;
          }
          case 16: {
            result.hasEffect = input.ReadInt32(ref result.effect_);
            break;
          }
          case 29: {
            result.hasSpeed = input.ReadFloat(ref result.speed_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMotion {
      get { return result.hasMotion; }
    }
    public int Motion {
      get { return result.Motion; }
      set { SetMotion(value); }
    }
    public Builder SetMotion(int value) {
      PrepareBuilder();
      result.hasMotion = true;
      result.motion_ = value;
      return this;
    }
    public Builder ClearMotion() {
      PrepareBuilder();
      result.hasMotion = false;
      result.motion_ = 0;
      return this;
    }
    
    public bool HasEffect {
      get { return result.hasEffect; }
    }
    public int Effect {
      get { return result.Effect; }
      set { SetEffect(value); }
    }
    public Builder SetEffect(int value) {
      PrepareBuilder();
      result.hasEffect = true;
      result.effect_ = value;
      return this;
    }
    public Builder ClearEffect() {
      PrepareBuilder();
      result.hasEffect = false;
      result.effect_ = 0;
      return this;
    }
    
    public bool HasSpeed {
      get { return result.hasSpeed; }
    }
    public float Speed {
      get { return result.Speed; }
      set { SetSpeed(value); }
    }
    public Builder SetSpeed(float value) {
      PrepareBuilder();
      result.hasSpeed = true;
      result.speed_ = value;
      return this;
    }
    public Builder ClearSpeed() {
      PrepareBuilder();
      result.hasSpeed = false;
      result.speed_ = 0F;
      return this;
    }
  }
  static MotionInfo() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SurvivalInfo : pb::GeneratedMessage<SurvivalInfo, SurvivalInfo.Builder> {
  private SurvivalInfo() { }
  private static readonly SurvivalInfo defaultInstance = new SurvivalInfo().MakeReadOnly();
  private static readonly string[] _survivalInfoFieldNames = new string[] { "hearth", "hungry", "tired" };
  private static readonly uint[] _survivalInfoFieldTags = new uint[] { 8, 16, 24 };
  public static SurvivalInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SurvivalInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SurvivalInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_SurvivalInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SurvivalInfo, SurvivalInfo.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_SurvivalInfo__FieldAccessorTable; }
  }
  
  public const int HearthFieldNumber = 1;
  private bool hasHearth;
  private int hearth_;
  public bool HasHearth {
    get { return hasHearth; }
  }
  public int Hearth {
    get { return hearth_; }
  }
  
  public const int HungryFieldNumber = 2;
  private bool hasHungry;
  private int hungry_;
  public bool HasHungry {
    get { return hasHungry; }
  }
  public int Hungry {
    get { return hungry_; }
  }
  
  public const int TiredFieldNumber = 3;
  private bool hasTired;
  private int tired_;
  public bool HasTired {
    get { return hasTired; }
  }
  public int Tired {
    get { return tired_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasHearth) return false;
      if (!hasHungry) return false;
      if (!hasTired) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _survivalInfoFieldNames;
    if (hasHearth) {
      output.WriteInt32(1, field_names[0], Hearth);
    }
    if (hasHungry) {
      output.WriteInt32(2, field_names[1], Hungry);
    }
    if (hasTired) {
      output.WriteInt32(3, field_names[2], Tired);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasHearth) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Hearth);
    }
    if (hasHungry) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Hungry);
    }
    if (hasTired) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Tired);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SurvivalInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SurvivalInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SurvivalInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SurvivalInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SurvivalInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SurvivalInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SurvivalInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SurvivalInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SurvivalInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SurvivalInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SurvivalInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SurvivalInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SurvivalInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SurvivalInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SurvivalInfo result;
    
    private SurvivalInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        SurvivalInfo original = result;
        result = new SurvivalInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SurvivalInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SurvivalInfo.Descriptor; }
    }
    
    public override SurvivalInfo DefaultInstanceForType {
      get { return global::SurvivalInfo.DefaultInstance; }
    }
    
    public override SurvivalInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SurvivalInfo) {
        return MergeFrom((SurvivalInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SurvivalInfo other) {
      if (other == global::SurvivalInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasHearth) {
        Hearth = other.Hearth;
      }
      if (other.HasHungry) {
        Hungry = other.Hungry;
      }
      if (other.HasTired) {
        Tired = other.Tired;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_survivalInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _survivalInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasHearth = input.ReadInt32(ref result.hearth_);
            break;
          }
          case 16: {
            result.hasHungry = input.ReadInt32(ref result.hungry_);
            break;
          }
          case 24: {
            result.hasTired = input.ReadInt32(ref result.tired_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasHearth {
      get { return result.hasHearth; }
    }
    public int Hearth {
      get { return result.Hearth; }
      set { SetHearth(value); }
    }
    public Builder SetHearth(int value) {
      PrepareBuilder();
      result.hasHearth = true;
      result.hearth_ = value;
      return this;
    }
    public Builder ClearHearth() {
      PrepareBuilder();
      result.hasHearth = false;
      result.hearth_ = 0;
      return this;
    }
    
    public bool HasHungry {
      get { return result.hasHungry; }
    }
    public int Hungry {
      get { return result.Hungry; }
      set { SetHungry(value); }
    }
    public Builder SetHungry(int value) {
      PrepareBuilder();
      result.hasHungry = true;
      result.hungry_ = value;
      return this;
    }
    public Builder ClearHungry() {
      PrepareBuilder();
      result.hasHungry = false;
      result.hungry_ = 0;
      return this;
    }
    
    public bool HasTired {
      get { return result.hasTired; }
    }
    public int Tired {
      get { return result.Tired; }
      set { SetTired(value); }
    }
    public Builder SetTired(int value) {
      PrepareBuilder();
      result.hasTired = true;
      result.tired_ = value;
      return this;
    }
    public Builder ClearTired() {
      PrepareBuilder();
      result.hasTired = false;
      result.tired_ = 0;
      return this;
    }
  }
  static SurvivalInfo() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class IdentifyInfo : pb::GeneratedMessage<IdentifyInfo, IdentifyInfo.Builder> {
  private IdentifyInfo() { }
  private static readonly IdentifyInfo defaultInstance = new IdentifyInfo().MakeReadOnly();
  private static readonly string[] _identifyInfoFieldNames = new string[] { "ID", "name", "type" };
  private static readonly uint[] _identifyInfoFieldTags = new uint[] { 10, 18, 24 };
  public static IdentifyInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override IdentifyInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override IdentifyInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_IdentifyInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<IdentifyInfo, IdentifyInfo.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_IdentifyInfo__FieldAccessorTable; }
  }
  
  public const int IDFieldNumber = 1;
  private bool hasID;
  private string iD_ = "";
  public bool HasID {
    get { return hasID; }
  }
  public string ID {
    get { return iD_; }
  }
  
  public const int NameFieldNumber = 2;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int TypeFieldNumber = 3;
  private bool hasType;
  private global::ItemType type_ = global::ItemType.BUILD;
  public bool HasType {
    get { return hasType; }
  }
  public global::ItemType Type {
    get { return type_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasID) return false;
      if (!hasName) return false;
      if (!hasType) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _identifyInfoFieldNames;
    if (hasID) {
      output.WriteString(1, field_names[0], ID);
    }
    if (hasName) {
      output.WriteString(2, field_names[1], Name);
    }
    if (hasType) {
      output.WriteEnum(3, field_names[2], (int) Type, Type);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasID) {
      size += pb::CodedOutputStream.ComputeStringSize(1, ID);
    }
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Name);
    }
    if (hasType) {
      size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Type);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static IdentifyInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static IdentifyInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static IdentifyInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static IdentifyInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static IdentifyInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static IdentifyInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static IdentifyInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static IdentifyInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static IdentifyInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static IdentifyInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private IdentifyInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(IdentifyInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<IdentifyInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(IdentifyInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private IdentifyInfo result;
    
    private IdentifyInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        IdentifyInfo original = result;
        result = new IdentifyInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override IdentifyInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::IdentifyInfo.Descriptor; }
    }
    
    public override IdentifyInfo DefaultInstanceForType {
      get { return global::IdentifyInfo.DefaultInstance; }
    }
    
    public override IdentifyInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is IdentifyInfo) {
        return MergeFrom((IdentifyInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(IdentifyInfo other) {
      if (other == global::IdentifyInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasID) {
        ID = other.ID;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_identifyInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _identifyInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasID = input.ReadString(ref result.iD_);
            break;
          }
          case 18: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 24: {
            object unknown;
            if(input.ReadEnum(ref result.type_, out unknown)) {
              result.hasType = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(3, (ulong)(int)unknown);
            }
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasID {
      get { return result.hasID; }
    }
    public string ID {
      get { return result.ID; }
      set { SetID(value); }
    }
    public Builder SetID(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasID = true;
      result.iD_ = value;
      return this;
    }
    public Builder ClearID() {
      PrepareBuilder();
      result.hasID = false;
      result.iD_ = "";
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasType {
     get { return result.hasType; }
    }
    public global::ItemType Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(global::ItemType value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = global::ItemType.BUILD;
      return this;
    }
  }
  static IdentifyInfo() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Item : pb::GeneratedMessage<Item, Item.Builder> {
  private Item() { }
  private static readonly Item defaultInstance = new Item().MakeReadOnly();
  private static readonly string[] _itemFieldNames = new string[] { "identify", "modInfo", "position", "survivalInfo" };
  private static readonly uint[] _itemFieldTags = new uint[] { 10, 26, 18, 34 };
  public static Item DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override Item DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override Item ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_Item__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<Item, Item.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_Item__FieldAccessorTable; }
  }
  
  public const int IdentifyFieldNumber = 1;
  private bool hasIdentify;
  private global::IdentifyInfo identify_;
  public bool HasIdentify {
    get { return hasIdentify; }
  }
  public global::IdentifyInfo Identify {
    get { return identify_ ?? global::IdentifyInfo.DefaultInstance; }
  }
  
  public const int PositionFieldNumber = 2;
  private bool hasPosition;
  private global::Position position_;
  public bool HasPosition {
    get { return hasPosition; }
  }
  public global::Position Position {
    get { return position_ ?? global::Position.DefaultInstance; }
  }
  
  public const int ModInfoFieldNumber = 3;
  private bool hasModInfo;
  private global::ModInfo modInfo_;
  public bool HasModInfo {
    get { return hasModInfo; }
  }
  public global::ModInfo ModInfo {
    get { return modInfo_ ?? global::ModInfo.DefaultInstance; }
  }
  
  public const int SurvivalInfoFieldNumber = 4;
  private bool hasSurvivalInfo;
  private global::SurvivalInfo survivalInfo_;
  public bool HasSurvivalInfo {
    get { return hasSurvivalInfo; }
  }
  public global::SurvivalInfo SurvivalInfo {
    get { return survivalInfo_ ?? global::SurvivalInfo.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasIdentify) return false;
      if (!hasPosition) return false;
      if (!hasModInfo) return false;
      if (!hasSurvivalInfo) return false;
      if (!Identify.IsInitialized) return false;
      if (!Position.IsInitialized) return false;
      if (!ModInfo.IsInitialized) return false;
      if (!SurvivalInfo.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _itemFieldNames;
    if (hasIdentify) {
      output.WriteMessage(1, field_names[0], Identify);
    }
    if (hasPosition) {
      output.WriteMessage(2, field_names[2], Position);
    }
    if (hasModInfo) {
      output.WriteMessage(3, field_names[1], ModInfo);
    }
    if (hasSurvivalInfo) {
      output.WriteMessage(4, field_names[3], SurvivalInfo);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasIdentify) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Identify);
    }
    if (hasPosition) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, Position);
    }
    if (hasModInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(3, ModInfo);
    }
    if (hasSurvivalInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(4, SurvivalInfo);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static Item ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Item ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Item ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Item ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Item ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Item ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static Item ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static Item ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static Item ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Item ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private Item MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(Item prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<Item, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(Item cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private Item result;
    
    private Item PrepareBuilder() {
      if (resultIsReadOnly) {
        Item original = result;
        result = new Item();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override Item MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::Item.Descriptor; }
    }
    
    public override Item DefaultInstanceForType {
      get { return global::Item.DefaultInstance; }
    }
    
    public override Item BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is Item) {
        return MergeFrom((Item) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(Item other) {
      if (other == global::Item.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasIdentify) {
        MergeIdentify(other.Identify);
      }
      if (other.HasPosition) {
        MergePosition(other.Position);
      }
      if (other.HasModInfo) {
        MergeModInfo(other.ModInfo);
      }
      if (other.HasSurvivalInfo) {
        MergeSurvivalInfo(other.SurvivalInfo);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_itemFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _itemFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::IdentifyInfo.Builder subBuilder = global::IdentifyInfo.CreateBuilder();
            if (result.hasIdentify) {
              subBuilder.MergeFrom(Identify);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Identify = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            global::Position.Builder subBuilder = global::Position.CreateBuilder();
            if (result.hasPosition) {
              subBuilder.MergeFrom(Position);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Position = subBuilder.BuildPartial();
            break;
          }
          case 26: {
            global::ModInfo.Builder subBuilder = global::ModInfo.CreateBuilder();
            if (result.hasModInfo) {
              subBuilder.MergeFrom(ModInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ModInfo = subBuilder.BuildPartial();
            break;
          }
          case 34: {
            global::SurvivalInfo.Builder subBuilder = global::SurvivalInfo.CreateBuilder();
            if (result.hasSurvivalInfo) {
              subBuilder.MergeFrom(SurvivalInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            SurvivalInfo = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasIdentify {
     get { return result.hasIdentify; }
    }
    public global::IdentifyInfo Identify {
      get { return result.Identify; }
      set { SetIdentify(value); }
    }
    public Builder SetIdentify(global::IdentifyInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasIdentify = true;
      result.identify_ = value;
      return this;
    }
    public Builder SetIdentify(global::IdentifyInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasIdentify = true;
      result.identify_ = builderForValue.Build();
      return this;
    }
    public Builder MergeIdentify(global::IdentifyInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasIdentify &&
          result.identify_ != global::IdentifyInfo.DefaultInstance) {
          result.identify_ = global::IdentifyInfo.CreateBuilder(result.identify_).MergeFrom(value).BuildPartial();
      } else {
        result.identify_ = value;
      }
      result.hasIdentify = true;
      return this;
    }
    public Builder ClearIdentify() {
      PrepareBuilder();
      result.hasIdentify = false;
      result.identify_ = null;
      return this;
    }
    
    public bool HasPosition {
     get { return result.hasPosition; }
    }
    public global::Position Position {
      get { return result.Position; }
      set { SetPosition(value); }
    }
    public Builder SetPosition(global::Position value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPosition = true;
      result.position_ = value;
      return this;
    }
    public Builder SetPosition(global::Position.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPosition = true;
      result.position_ = builderForValue.Build();
      return this;
    }
    public Builder MergePosition(global::Position value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPosition &&
          result.position_ != global::Position.DefaultInstance) {
          result.position_ = global::Position.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
      } else {
        result.position_ = value;
      }
      result.hasPosition = true;
      return this;
    }
    public Builder ClearPosition() {
      PrepareBuilder();
      result.hasPosition = false;
      result.position_ = null;
      return this;
    }
    
    public bool HasModInfo {
     get { return result.hasModInfo; }
    }
    public global::ModInfo ModInfo {
      get { return result.ModInfo; }
      set { SetModInfo(value); }
    }
    public Builder SetModInfo(global::ModInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasModInfo = true;
      result.modInfo_ = value;
      return this;
    }
    public Builder SetModInfo(global::ModInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasModInfo = true;
      result.modInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeModInfo(global::ModInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasModInfo &&
          result.modInfo_ != global::ModInfo.DefaultInstance) {
          result.modInfo_ = global::ModInfo.CreateBuilder(result.modInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.modInfo_ = value;
      }
      result.hasModInfo = true;
      return this;
    }
    public Builder ClearModInfo() {
      PrepareBuilder();
      result.hasModInfo = false;
      result.modInfo_ = null;
      return this;
    }
    
    public bool HasSurvivalInfo {
     get { return result.hasSurvivalInfo; }
    }
    public global::SurvivalInfo SurvivalInfo {
      get { return result.SurvivalInfo; }
      set { SetSurvivalInfo(value); }
    }
    public Builder SetSurvivalInfo(global::SurvivalInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasSurvivalInfo = true;
      result.survivalInfo_ = value;
      return this;
    }
    public Builder SetSurvivalInfo(global::SurvivalInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasSurvivalInfo = true;
      result.survivalInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeSurvivalInfo(global::SurvivalInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasSurvivalInfo &&
          result.survivalInfo_ != global::SurvivalInfo.DefaultInstance) {
          result.survivalInfo_ = global::SurvivalInfo.CreateBuilder(result.survivalInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.survivalInfo_ = value;
      }
      result.hasSurvivalInfo = true;
      return this;
    }
    public Builder ClearSurvivalInfo() {
      PrepareBuilder();
      result.hasSurvivalInfo = false;
      result.survivalInfo_ = null;
      return this;
    }
  }
  static Item() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Character : pb::GeneratedMessage<Character, Character.Builder> {
  private Character() { }
  private static readonly Character defaultInstance = new Character().MakeReadOnly();
  private static readonly string[] _characterFieldNames = new string[] { "identify", "modInfo", "position", "survivalInfo" };
  private static readonly uint[] _characterFieldTags = new uint[] { 10, 26, 18, 34 };
  public static Character DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override Character DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override Character ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_Character__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<Character, Character.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_Character__FieldAccessorTable; }
  }
  
  public const int IdentifyFieldNumber = 1;
  private bool hasIdentify;
  private global::IdentifyInfo identify_;
  public bool HasIdentify {
    get { return hasIdentify; }
  }
  public global::IdentifyInfo Identify {
    get { return identify_ ?? global::IdentifyInfo.DefaultInstance; }
  }
  
  public const int PositionFieldNumber = 2;
  private bool hasPosition;
  private global::Position position_;
  public bool HasPosition {
    get { return hasPosition; }
  }
  public global::Position Position {
    get { return position_ ?? global::Position.DefaultInstance; }
  }
  
  public const int ModInfoFieldNumber = 3;
  private bool hasModInfo;
  private global::ModInfo modInfo_;
  public bool HasModInfo {
    get { return hasModInfo; }
  }
  public global::ModInfo ModInfo {
    get { return modInfo_ ?? global::ModInfo.DefaultInstance; }
  }
  
  public const int SurvivalInfoFieldNumber = 4;
  private bool hasSurvivalInfo;
  private global::SurvivalInfo survivalInfo_;
  public bool HasSurvivalInfo {
    get { return hasSurvivalInfo; }
  }
  public global::SurvivalInfo SurvivalInfo {
    get { return survivalInfo_ ?? global::SurvivalInfo.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasIdentify) return false;
      if (!hasPosition) return false;
      if (!hasModInfo) return false;
      if (!hasSurvivalInfo) return false;
      if (!Identify.IsInitialized) return false;
      if (!Position.IsInitialized) return false;
      if (!ModInfo.IsInitialized) return false;
      if (!SurvivalInfo.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _characterFieldNames;
    if (hasIdentify) {
      output.WriteMessage(1, field_names[0], Identify);
    }
    if (hasPosition) {
      output.WriteMessage(2, field_names[2], Position);
    }
    if (hasModInfo) {
      output.WriteMessage(3, field_names[1], ModInfo);
    }
    if (hasSurvivalInfo) {
      output.WriteMessage(4, field_names[3], SurvivalInfo);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasIdentify) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Identify);
    }
    if (hasPosition) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, Position);
    }
    if (hasModInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(3, ModInfo);
    }
    if (hasSurvivalInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(4, SurvivalInfo);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static Character ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Character ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Character ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Character ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Character ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Character ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static Character ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static Character ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static Character ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Character ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private Character MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(Character prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<Character, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(Character cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private Character result;
    
    private Character PrepareBuilder() {
      if (resultIsReadOnly) {
        Character original = result;
        result = new Character();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override Character MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::Character.Descriptor; }
    }
    
    public override Character DefaultInstanceForType {
      get { return global::Character.DefaultInstance; }
    }
    
    public override Character BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is Character) {
        return MergeFrom((Character) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(Character other) {
      if (other == global::Character.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasIdentify) {
        MergeIdentify(other.Identify);
      }
      if (other.HasPosition) {
        MergePosition(other.Position);
      }
      if (other.HasModInfo) {
        MergeModInfo(other.ModInfo);
      }
      if (other.HasSurvivalInfo) {
        MergeSurvivalInfo(other.SurvivalInfo);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_characterFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _characterFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::IdentifyInfo.Builder subBuilder = global::IdentifyInfo.CreateBuilder();
            if (result.hasIdentify) {
              subBuilder.MergeFrom(Identify);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Identify = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            global::Position.Builder subBuilder = global::Position.CreateBuilder();
            if (result.hasPosition) {
              subBuilder.MergeFrom(Position);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Position = subBuilder.BuildPartial();
            break;
          }
          case 26: {
            global::ModInfo.Builder subBuilder = global::ModInfo.CreateBuilder();
            if (result.hasModInfo) {
              subBuilder.MergeFrom(ModInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ModInfo = subBuilder.BuildPartial();
            break;
          }
          case 34: {
            global::SurvivalInfo.Builder subBuilder = global::SurvivalInfo.CreateBuilder();
            if (result.hasSurvivalInfo) {
              subBuilder.MergeFrom(SurvivalInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            SurvivalInfo = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasIdentify {
     get { return result.hasIdentify; }
    }
    public global::IdentifyInfo Identify {
      get { return result.Identify; }
      set { SetIdentify(value); }
    }
    public Builder SetIdentify(global::IdentifyInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasIdentify = true;
      result.identify_ = value;
      return this;
    }
    public Builder SetIdentify(global::IdentifyInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasIdentify = true;
      result.identify_ = builderForValue.Build();
      return this;
    }
    public Builder MergeIdentify(global::IdentifyInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasIdentify &&
          result.identify_ != global::IdentifyInfo.DefaultInstance) {
          result.identify_ = global::IdentifyInfo.CreateBuilder(result.identify_).MergeFrom(value).BuildPartial();
      } else {
        result.identify_ = value;
      }
      result.hasIdentify = true;
      return this;
    }
    public Builder ClearIdentify() {
      PrepareBuilder();
      result.hasIdentify = false;
      result.identify_ = null;
      return this;
    }
    
    public bool HasPosition {
     get { return result.hasPosition; }
    }
    public global::Position Position {
      get { return result.Position; }
      set { SetPosition(value); }
    }
    public Builder SetPosition(global::Position value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPosition = true;
      result.position_ = value;
      return this;
    }
    public Builder SetPosition(global::Position.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPosition = true;
      result.position_ = builderForValue.Build();
      return this;
    }
    public Builder MergePosition(global::Position value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPosition &&
          result.position_ != global::Position.DefaultInstance) {
          result.position_ = global::Position.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
      } else {
        result.position_ = value;
      }
      result.hasPosition = true;
      return this;
    }
    public Builder ClearPosition() {
      PrepareBuilder();
      result.hasPosition = false;
      result.position_ = null;
      return this;
    }
    
    public bool HasModInfo {
     get { return result.hasModInfo; }
    }
    public global::ModInfo ModInfo {
      get { return result.ModInfo; }
      set { SetModInfo(value); }
    }
    public Builder SetModInfo(global::ModInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasModInfo = true;
      result.modInfo_ = value;
      return this;
    }
    public Builder SetModInfo(global::ModInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasModInfo = true;
      result.modInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeModInfo(global::ModInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasModInfo &&
          result.modInfo_ != global::ModInfo.DefaultInstance) {
          result.modInfo_ = global::ModInfo.CreateBuilder(result.modInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.modInfo_ = value;
      }
      result.hasModInfo = true;
      return this;
    }
    public Builder ClearModInfo() {
      PrepareBuilder();
      result.hasModInfo = false;
      result.modInfo_ = null;
      return this;
    }
    
    public bool HasSurvivalInfo {
     get { return result.hasSurvivalInfo; }
    }
    public global::SurvivalInfo SurvivalInfo {
      get { return result.SurvivalInfo; }
      set { SetSurvivalInfo(value); }
    }
    public Builder SetSurvivalInfo(global::SurvivalInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasSurvivalInfo = true;
      result.survivalInfo_ = value;
      return this;
    }
    public Builder SetSurvivalInfo(global::SurvivalInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasSurvivalInfo = true;
      result.survivalInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeSurvivalInfo(global::SurvivalInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasSurvivalInfo &&
          result.survivalInfo_ != global::SurvivalInfo.DefaultInstance) {
          result.survivalInfo_ = global::SurvivalInfo.CreateBuilder(result.survivalInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.survivalInfo_ = value;
      }
      result.hasSurvivalInfo = true;
      return this;
    }
    public Builder ClearSurvivalInfo() {
      PrepareBuilder();
      result.hasSurvivalInfo = false;
      result.survivalInfo_ = null;
      return this;
    }
  }
  static Character() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ClientCommonResponse : pb::GeneratedMessage<ClientCommonResponse, ClientCommonResponse.Builder> {
  private ClientCommonResponse() { }
  private static readonly ClientCommonResponse defaultInstance = new ClientCommonResponse().MakeReadOnly();
  private static readonly string[] _clientCommonResponseFieldNames = new string[] { "stat" };
  private static readonly uint[] _clientCommonResponseFieldTags = new uint[] { 8 };
  public static ClientCommonResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ClientCommonResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ClientCommonResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_ClientCommonResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ClientCommonResponse, ClientCommonResponse.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_ClientCommonResponse__FieldAccessorTable; }
  }
  
  public const int StatFieldNumber = 1;
  private bool hasStat;
  private global::CommonStat stat_ = global::CommonStat.OK;
  public bool HasStat {
    get { return hasStat; }
  }
  public global::CommonStat Stat {
    get { return stat_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasStat) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _clientCommonResponseFieldNames;
    if (hasStat) {
      output.WriteEnum(1, field_names[0], (int) Stat, Stat);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStat) {
      size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Stat);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ClientCommonResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ClientCommonResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ClientCommonResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ClientCommonResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ClientCommonResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ClientCommonResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ClientCommonResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ClientCommonResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ClientCommonResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ClientCommonResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ClientCommonResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ClientCommonResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ClientCommonResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ClientCommonResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ClientCommonResponse result;
    
    private ClientCommonResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        ClientCommonResponse original = result;
        result = new ClientCommonResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ClientCommonResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ClientCommonResponse.Descriptor; }
    }
    
    public override ClientCommonResponse DefaultInstanceForType {
      get { return global::ClientCommonResponse.DefaultInstance; }
    }
    
    public override ClientCommonResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ClientCommonResponse) {
        return MergeFrom((ClientCommonResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ClientCommonResponse other) {
      if (other == global::ClientCommonResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStat) {
        Stat = other.Stat;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_clientCommonResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _clientCommonResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            object unknown;
            if(input.ReadEnum(ref result.stat_, out unknown)) {
              result.hasStat = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(1, (ulong)(int)unknown);
            }
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStat {
     get { return result.hasStat; }
    }
    public global::CommonStat Stat {
      get { return result.Stat; }
      set { SetStat(value); }
    }
    public Builder SetStat(global::CommonStat value) {
      PrepareBuilder();
      result.hasStat = true;
      result.stat_ = value;
      return this;
    }
    public Builder ClearStat() {
      PrepareBuilder();
      result.hasStat = false;
      result.stat_ = global::CommonStat.OK;
      return this;
    }
  }
  static ClientCommonResponse() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class UserLoginRequest : pb::GeneratedMessage<UserLoginRequest, UserLoginRequest.Builder> {
  private UserLoginRequest() { }
  private static readonly UserLoginRequest defaultInstance = new UserLoginRequest().MakeReadOnly();
  private static readonly string[] _userLoginRequestFieldNames = new string[] { "uname", "upwd" };
  private static readonly uint[] _userLoginRequestFieldTags = new uint[] { 10, 18 };
  public static UserLoginRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override UserLoginRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override UserLoginRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_UserLoginRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<UserLoginRequest, UserLoginRequest.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_UserLoginRequest__FieldAccessorTable; }
  }
  
  public const int UnameFieldNumber = 1;
  private bool hasUname;
  private string uname_ = "";
  public bool HasUname {
    get { return hasUname; }
  }
  public string Uname {
    get { return uname_; }
  }
  
  public const int UpwdFieldNumber = 2;
  private bool hasUpwd;
  private string upwd_ = "";
  public bool HasUpwd {
    get { return hasUpwd; }
  }
  public string Upwd {
    get { return upwd_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasUname) return false;
      if (!hasUpwd) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _userLoginRequestFieldNames;
    if (hasUname) {
      output.WriteString(1, field_names[0], Uname);
    }
    if (hasUpwd) {
      output.WriteString(2, field_names[1], Upwd);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasUname) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Uname);
    }
    if (hasUpwd) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Upwd);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static UserLoginRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserLoginRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserLoginRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserLoginRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserLoginRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserLoginRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static UserLoginRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static UserLoginRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static UserLoginRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserLoginRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private UserLoginRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(UserLoginRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<UserLoginRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(UserLoginRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private UserLoginRequest result;
    
    private UserLoginRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        UserLoginRequest original = result;
        result = new UserLoginRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override UserLoginRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::UserLoginRequest.Descriptor; }
    }
    
    public override UserLoginRequest DefaultInstanceForType {
      get { return global::UserLoginRequest.DefaultInstance; }
    }
    
    public override UserLoginRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is UserLoginRequest) {
        return MergeFrom((UserLoginRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(UserLoginRequest other) {
      if (other == global::UserLoginRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasUname) {
        Uname = other.Uname;
      }
      if (other.HasUpwd) {
        Upwd = other.Upwd;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_userLoginRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _userLoginRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasUname = input.ReadString(ref result.uname_);
            break;
          }
          case 18: {
            result.hasUpwd = input.ReadString(ref result.upwd_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasUname {
      get { return result.hasUname; }
    }
    public string Uname {
      get { return result.Uname; }
      set { SetUname(value); }
    }
    public Builder SetUname(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUname = true;
      result.uname_ = value;
      return this;
    }
    public Builder ClearUname() {
      PrepareBuilder();
      result.hasUname = false;
      result.uname_ = "";
      return this;
    }
    
    public bool HasUpwd {
      get { return result.hasUpwd; }
    }
    public string Upwd {
      get { return result.Upwd; }
      set { SetUpwd(value); }
    }
    public Builder SetUpwd(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUpwd = true;
      result.upwd_ = value;
      return this;
    }
    public Builder ClearUpwd() {
      PrepareBuilder();
      result.hasUpwd = false;
      result.upwd_ = "";
      return this;
    }
  }
  static UserLoginRequest() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class UserLoginResponse : pb::GeneratedMessage<UserLoginResponse, UserLoginResponse.Builder> {
  private UserLoginResponse() { }
  private static readonly UserLoginResponse defaultInstance = new UserLoginResponse().MakeReadOnly();
  private static readonly string[] _userLoginResponseFieldNames = new string[] { "code", "ticket" };
  private static readonly uint[] _userLoginResponseFieldTags = new uint[] { 8, 18 };
  public static UserLoginResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override UserLoginResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override UserLoginResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_UserLoginResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<UserLoginResponse, UserLoginResponse.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_UserLoginResponse__FieldAccessorTable; }
  }
  
  public const int CodeFieldNumber = 1;
  private bool hasCode;
  private global::LoginCode code_ = global::LoginCode.SUC;
  public bool HasCode {
    get { return hasCode; }
  }
  public global::LoginCode Code {
    get { return code_; }
  }
  
  public const int TicketFieldNumber = 2;
  private bool hasTicket;
  private string ticket_ = "";
  public bool HasTicket {
    get { return hasTicket; }
  }
  public string Ticket {
    get { return ticket_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCode) return false;
      if (!hasTicket) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _userLoginResponseFieldNames;
    if (hasCode) {
      output.WriteEnum(1, field_names[0], (int) Code, Code);
    }
    if (hasTicket) {
      output.WriteString(2, field_names[1], Ticket);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCode) {
      size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Code);
    }
    if (hasTicket) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Ticket);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static UserLoginResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserLoginResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserLoginResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserLoginResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserLoginResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserLoginResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static UserLoginResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static UserLoginResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static UserLoginResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserLoginResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private UserLoginResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(UserLoginResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<UserLoginResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(UserLoginResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private UserLoginResponse result;
    
    private UserLoginResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        UserLoginResponse original = result;
        result = new UserLoginResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override UserLoginResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::UserLoginResponse.Descriptor; }
    }
    
    public override UserLoginResponse DefaultInstanceForType {
      get { return global::UserLoginResponse.DefaultInstance; }
    }
    
    public override UserLoginResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is UserLoginResponse) {
        return MergeFrom((UserLoginResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(UserLoginResponse other) {
      if (other == global::UserLoginResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasTicket) {
        Ticket = other.Ticket;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_userLoginResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _userLoginResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            object unknown;
            if(input.ReadEnum(ref result.code_, out unknown)) {
              result.hasCode = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(1, (ulong)(int)unknown);
            }
            break;
          }
          case 18: {
            result.hasTicket = input.ReadString(ref result.ticket_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCode {
     get { return result.hasCode; }
    }
    public global::LoginCode Code {
      get { return result.Code; }
      set { SetCode(value); }
    }
    public Builder SetCode(global::LoginCode value) {
      PrepareBuilder();
      result.hasCode = true;
      result.code_ = value;
      return this;
    }
    public Builder ClearCode() {
      PrepareBuilder();
      result.hasCode = false;
      result.code_ = global::LoginCode.SUC;
      return this;
    }
    
    public bool HasTicket {
      get { return result.hasTicket; }
    }
    public string Ticket {
      get { return result.Ticket; }
      set { SetTicket(value); }
    }
    public Builder SetTicket(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTicket = true;
      result.ticket_ = value;
      return this;
    }
    public Builder ClearTicket() {
      PrepareBuilder();
      result.hasTicket = false;
      result.ticket_ = "";
      return this;
    }
  }
  static UserLoginResponse() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class UserLogoutRequest : pb::GeneratedMessage<UserLogoutRequest, UserLogoutRequest.Builder> {
  private UserLogoutRequest() { }
  private static readonly UserLogoutRequest defaultInstance = new UserLogoutRequest().MakeReadOnly();
  private static readonly string[] _userLogoutRequestFieldNames = new string[] { "ticket" };
  private static readonly uint[] _userLogoutRequestFieldTags = new uint[] { 10 };
  public static UserLogoutRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override UserLogoutRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override UserLogoutRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_UserLogoutRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<UserLogoutRequest, UserLogoutRequest.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_UserLogoutRequest__FieldAccessorTable; }
  }
  
  public const int TicketFieldNumber = 1;
  private bool hasTicket;
  private string ticket_ = "";
  public bool HasTicket {
    get { return hasTicket; }
  }
  public string Ticket {
    get { return ticket_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasTicket) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _userLogoutRequestFieldNames;
    if (hasTicket) {
      output.WriteString(1, field_names[0], Ticket);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasTicket) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Ticket);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static UserLogoutRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserLogoutRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserLogoutRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserLogoutRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserLogoutRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserLogoutRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static UserLogoutRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static UserLogoutRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static UserLogoutRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserLogoutRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private UserLogoutRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(UserLogoutRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<UserLogoutRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(UserLogoutRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private UserLogoutRequest result;
    
    private UserLogoutRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        UserLogoutRequest original = result;
        result = new UserLogoutRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override UserLogoutRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::UserLogoutRequest.Descriptor; }
    }
    
    public override UserLogoutRequest DefaultInstanceForType {
      get { return global::UserLogoutRequest.DefaultInstance; }
    }
    
    public override UserLogoutRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is UserLogoutRequest) {
        return MergeFrom((UserLogoutRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(UserLogoutRequest other) {
      if (other == global::UserLogoutRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasTicket) {
        Ticket = other.Ticket;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_userLogoutRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _userLogoutRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasTicket = input.ReadString(ref result.ticket_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasTicket {
      get { return result.hasTicket; }
    }
    public string Ticket {
      get { return result.Ticket; }
      set { SetTicket(value); }
    }
    public Builder SetTicket(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTicket = true;
      result.ticket_ = value;
      return this;
    }
    public Builder ClearTicket() {
      PrepareBuilder();
      result.hasTicket = false;
      result.ticket_ = "";
      return this;
    }
  }
  static UserLogoutRequest() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class UserLogoutResponse : pb::GeneratedMessage<UserLogoutResponse, UserLogoutResponse.Builder> {
  private UserLogoutResponse() { }
  private static readonly UserLogoutResponse defaultInstance = new UserLogoutResponse().MakeReadOnly();
  private static readonly string[] _userLogoutResponseFieldNames = new string[] { "code" };
  private static readonly uint[] _userLogoutResponseFieldTags = new uint[] { 8 };
  public static UserLogoutResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override UserLogoutResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override UserLogoutResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_UserLogoutResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<UserLogoutResponse, UserLogoutResponse.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_UserLogoutResponse__FieldAccessorTable; }
  }
  
  public const int CodeFieldNumber = 1;
  private bool hasCode;
  private global::LoginCode code_ = global::LoginCode.SUC;
  public bool HasCode {
    get { return hasCode; }
  }
  public global::LoginCode Code {
    get { return code_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCode) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _userLogoutResponseFieldNames;
    if (hasCode) {
      output.WriteEnum(1, field_names[0], (int) Code, Code);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCode) {
      size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Code);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static UserLogoutResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserLogoutResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserLogoutResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserLogoutResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserLogoutResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserLogoutResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static UserLogoutResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static UserLogoutResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static UserLogoutResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserLogoutResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private UserLogoutResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(UserLogoutResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<UserLogoutResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(UserLogoutResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private UserLogoutResponse result;
    
    private UserLogoutResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        UserLogoutResponse original = result;
        result = new UserLogoutResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override UserLogoutResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::UserLogoutResponse.Descriptor; }
    }
    
    public override UserLogoutResponse DefaultInstanceForType {
      get { return global::UserLogoutResponse.DefaultInstance; }
    }
    
    public override UserLogoutResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is UserLogoutResponse) {
        return MergeFrom((UserLogoutResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(UserLogoutResponse other) {
      if (other == global::UserLogoutResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCode) {
        Code = other.Code;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_userLogoutResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _userLogoutResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            object unknown;
            if(input.ReadEnum(ref result.code_, out unknown)) {
              result.hasCode = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(1, (ulong)(int)unknown);
            }
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCode {
     get { return result.hasCode; }
    }
    public global::LoginCode Code {
      get { return result.Code; }
      set { SetCode(value); }
    }
    public Builder SetCode(global::LoginCode value) {
      PrepareBuilder();
      result.hasCode = true;
      result.code_ = value;
      return this;
    }
    public Builder ClearCode() {
      PrepareBuilder();
      result.hasCode = false;
      result.code_ = global::LoginCode.SUC;
      return this;
    }
  }
  static UserLogoutResponse() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class GetCharacterInfoRequest : pb::GeneratedMessage<GetCharacterInfoRequest, GetCharacterInfoRequest.Builder> {
  private GetCharacterInfoRequest() { }
  private static readonly GetCharacterInfoRequest defaultInstance = new GetCharacterInfoRequest().MakeReadOnly();
  private static readonly string[] _getCharacterInfoRequestFieldNames = new string[] { "ticket" };
  private static readonly uint[] _getCharacterInfoRequestFieldTags = new uint[] { 10 };
  public static GetCharacterInfoRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override GetCharacterInfoRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override GetCharacterInfoRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_GetCharacterInfoRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<GetCharacterInfoRequest, GetCharacterInfoRequest.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_GetCharacterInfoRequest__FieldAccessorTable; }
  }
  
  public const int TicketFieldNumber = 1;
  private bool hasTicket;
  private string ticket_ = "";
  public bool HasTicket {
    get { return hasTicket; }
  }
  public string Ticket {
    get { return ticket_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasTicket) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _getCharacterInfoRequestFieldNames;
    if (hasTicket) {
      output.WriteString(1, field_names[0], Ticket);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasTicket) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Ticket);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static GetCharacterInfoRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GetCharacterInfoRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GetCharacterInfoRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GetCharacterInfoRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GetCharacterInfoRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GetCharacterInfoRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static GetCharacterInfoRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static GetCharacterInfoRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static GetCharacterInfoRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GetCharacterInfoRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private GetCharacterInfoRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(GetCharacterInfoRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<GetCharacterInfoRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(GetCharacterInfoRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private GetCharacterInfoRequest result;
    
    private GetCharacterInfoRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        GetCharacterInfoRequest original = result;
        result = new GetCharacterInfoRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override GetCharacterInfoRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::GetCharacterInfoRequest.Descriptor; }
    }
    
    public override GetCharacterInfoRequest DefaultInstanceForType {
      get { return global::GetCharacterInfoRequest.DefaultInstance; }
    }
    
    public override GetCharacterInfoRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is GetCharacterInfoRequest) {
        return MergeFrom((GetCharacterInfoRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(GetCharacterInfoRequest other) {
      if (other == global::GetCharacterInfoRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasTicket) {
        Ticket = other.Ticket;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_getCharacterInfoRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _getCharacterInfoRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasTicket = input.ReadString(ref result.ticket_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasTicket {
      get { return result.hasTicket; }
    }
    public string Ticket {
      get { return result.Ticket; }
      set { SetTicket(value); }
    }
    public Builder SetTicket(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTicket = true;
      result.ticket_ = value;
      return this;
    }
    public Builder ClearTicket() {
      PrepareBuilder();
      result.hasTicket = false;
      result.ticket_ = "";
      return this;
    }
  }
  static GetCharacterInfoRequest() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class GetCharacterInfoResponse : pb::GeneratedMessage<GetCharacterInfoResponse, GetCharacterInfoResponse.Builder> {
  private GetCharacterInfoResponse() { }
  private static readonly GetCharacterInfoResponse defaultInstance = new GetCharacterInfoResponse().MakeReadOnly();
  private static readonly string[] _getCharacterInfoResponseFieldNames = new string[] { "character" };
  private static readonly uint[] _getCharacterInfoResponseFieldTags = new uint[] { 10 };
  public static GetCharacterInfoResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override GetCharacterInfoResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override GetCharacterInfoResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_GetCharacterInfoResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<GetCharacterInfoResponse, GetCharacterInfoResponse.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_GetCharacterInfoResponse__FieldAccessorTable; }
  }
  
  public const int CharacterFieldNumber = 1;
  private bool hasCharacter;
  private global::Character character_;
  public bool HasCharacter {
    get { return hasCharacter; }
  }
  public global::Character Character {
    get { return character_ ?? global::Character.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCharacter) return false;
      if (!Character.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _getCharacterInfoResponseFieldNames;
    if (hasCharacter) {
      output.WriteMessage(1, field_names[0], Character);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCharacter) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Character);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static GetCharacterInfoResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GetCharacterInfoResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GetCharacterInfoResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GetCharacterInfoResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GetCharacterInfoResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GetCharacterInfoResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static GetCharacterInfoResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static GetCharacterInfoResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static GetCharacterInfoResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GetCharacterInfoResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private GetCharacterInfoResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(GetCharacterInfoResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<GetCharacterInfoResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(GetCharacterInfoResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private GetCharacterInfoResponse result;
    
    private GetCharacterInfoResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        GetCharacterInfoResponse original = result;
        result = new GetCharacterInfoResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override GetCharacterInfoResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::GetCharacterInfoResponse.Descriptor; }
    }
    
    public override GetCharacterInfoResponse DefaultInstanceForType {
      get { return global::GetCharacterInfoResponse.DefaultInstance; }
    }
    
    public override GetCharacterInfoResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is GetCharacterInfoResponse) {
        return MergeFrom((GetCharacterInfoResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(GetCharacterInfoResponse other) {
      if (other == global::GetCharacterInfoResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCharacter) {
        MergeCharacter(other.Character);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_getCharacterInfoResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _getCharacterInfoResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::Character.Builder subBuilder = global::Character.CreateBuilder();
            if (result.hasCharacter) {
              subBuilder.MergeFrom(Character);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Character = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCharacter {
     get { return result.hasCharacter; }
    }
    public global::Character Character {
      get { return result.Character; }
      set { SetCharacter(value); }
    }
    public Builder SetCharacter(global::Character value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCharacter = true;
      result.character_ = value;
      return this;
    }
    public Builder SetCharacter(global::Character.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCharacter = true;
      result.character_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCharacter(global::Character value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCharacter &&
          result.character_ != global::Character.DefaultInstance) {
          result.character_ = global::Character.CreateBuilder(result.character_).MergeFrom(value).BuildPartial();
      } else {
        result.character_ = value;
      }
      result.hasCharacter = true;
      return this;
    }
    public Builder ClearCharacter() {
      PrepareBuilder();
      result.hasCharacter = false;
      result.character_ = null;
      return this;
    }
  }
  static GetCharacterInfoResponse() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ItemMoveEvent : pb::GeneratedMessage<ItemMoveEvent, ItemMoveEvent.Builder> {
  private ItemMoveEvent() { }
  private static readonly ItemMoveEvent defaultInstance = new ItemMoveEvent().MakeReadOnly();
  private static readonly string[] _itemMoveEventFieldNames = new string[] { "fromPos", "identify", "playMotion", "speed", "toPos" };
  private static readonly uint[] _itemMoveEventFieldTags = new uint[] { 18, 10, 42, 37, 26 };
  public static ItemMoveEvent DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ItemMoveEvent DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ItemMoveEvent ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_ItemMoveEvent__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ItemMoveEvent, ItemMoveEvent.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_ItemMoveEvent__FieldAccessorTable; }
  }
  
  public const int IdentifyFieldNumber = 1;
  private pbc::PopsicleList<global::IdentifyInfo> identify_ = new pbc::PopsicleList<global::IdentifyInfo>();
  public scg::IList<global::IdentifyInfo> IdentifyList {
    get { return identify_; }
  }
  public int IdentifyCount {
    get { return identify_.Count; }
  }
  public global::IdentifyInfo GetIdentify(int index) {
    return identify_[index];
  }
  
  public const int FromPosFieldNumber = 2;
  private pbc::PopsicleList<global::Position> fromPos_ = new pbc::PopsicleList<global::Position>();
  public scg::IList<global::Position> FromPosList {
    get { return fromPos_; }
  }
  public int FromPosCount {
    get { return fromPos_.Count; }
  }
  public global::Position GetFromPos(int index) {
    return fromPos_[index];
  }
  
  public const int ToPosFieldNumber = 3;
  private pbc::PopsicleList<global::Position> toPos_ = new pbc::PopsicleList<global::Position>();
  public scg::IList<global::Position> ToPosList {
    get { return toPos_; }
  }
  public int ToPosCount {
    get { return toPos_.Count; }
  }
  public global::Position GetToPos(int index) {
    return toPos_[index];
  }
  
  public const int SpeedFieldNumber = 4;
  private pbc::PopsicleList<float> speed_ = new pbc::PopsicleList<float>();
  public scg::IList<float> SpeedList {
    get { return pbc::Lists.AsReadOnly(speed_); }
  }
  public int SpeedCount {
    get { return speed_.Count; }
  }
  public float GetSpeed(int index) {
    return speed_[index];
  }
  
  public const int PlayMotionFieldNumber = 5;
  private pbc::PopsicleList<global::MotionInfo> playMotion_ = new pbc::PopsicleList<global::MotionInfo>();
  public scg::IList<global::MotionInfo> PlayMotionList {
    get { return playMotion_; }
  }
  public int PlayMotionCount {
    get { return playMotion_.Count; }
  }
  public global::MotionInfo GetPlayMotion(int index) {
    return playMotion_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::IdentifyInfo element in IdentifyList) {
        if (!element.IsInitialized) return false;
      }
      foreach (global::Position element in FromPosList) {
        if (!element.IsInitialized) return false;
      }
      foreach (global::Position element in ToPosList) {
        if (!element.IsInitialized) return false;
      }
      foreach (global::MotionInfo element in PlayMotionList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _itemMoveEventFieldNames;
    if (identify_.Count > 0) {
      output.WriteMessageArray(1, field_names[1], identify_);
    }
    if (fromPos_.Count > 0) {
      output.WriteMessageArray(2, field_names[0], fromPos_);
    }
    if (toPos_.Count > 0) {
      output.WriteMessageArray(3, field_names[4], toPos_);
    }
    if (speed_.Count > 0) {
      output.WriteFloatArray(4, field_names[3], speed_);
    }
    if (playMotion_.Count > 0) {
      output.WriteMessageArray(5, field_names[2], playMotion_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::IdentifyInfo element in IdentifyList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    foreach (global::Position element in FromPosList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    foreach (global::Position element in ToPosList) {
      size += pb::CodedOutputStream.ComputeMessageSize(3, element);
    }
    {
      int dataSize = 0;
      dataSize = 4 * speed_.Count;
      size += dataSize;
      size += 1 * speed_.Count;
    }
    foreach (global::MotionInfo element in PlayMotionList) {
      size += pb::CodedOutputStream.ComputeMessageSize(5, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ItemMoveEvent ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ItemMoveEvent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ItemMoveEvent ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ItemMoveEvent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ItemMoveEvent ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ItemMoveEvent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ItemMoveEvent ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ItemMoveEvent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ItemMoveEvent ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ItemMoveEvent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ItemMoveEvent MakeReadOnly() {
    identify_.MakeReadOnly();
    fromPos_.MakeReadOnly();
    toPos_.MakeReadOnly();
    speed_.MakeReadOnly();
    playMotion_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ItemMoveEvent prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ItemMoveEvent, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ItemMoveEvent cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ItemMoveEvent result;
    
    private ItemMoveEvent PrepareBuilder() {
      if (resultIsReadOnly) {
        ItemMoveEvent original = result;
        result = new ItemMoveEvent();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ItemMoveEvent MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ItemMoveEvent.Descriptor; }
    }
    
    public override ItemMoveEvent DefaultInstanceForType {
      get { return global::ItemMoveEvent.DefaultInstance; }
    }
    
    public override ItemMoveEvent BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ItemMoveEvent) {
        return MergeFrom((ItemMoveEvent) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ItemMoveEvent other) {
      if (other == global::ItemMoveEvent.DefaultInstance) return this;
      PrepareBuilder();
      if (other.identify_.Count != 0) {
        result.identify_.Add(other.identify_);
      }
      if (other.fromPos_.Count != 0) {
        result.fromPos_.Add(other.fromPos_);
      }
      if (other.toPos_.Count != 0) {
        result.toPos_.Add(other.toPos_);
      }
      if (other.speed_.Count != 0) {
        result.speed_.Add(other.speed_);
      }
      if (other.playMotion_.Count != 0) {
        result.playMotion_.Add(other.playMotion_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_itemMoveEventFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _itemMoveEventFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.identify_, global::IdentifyInfo.DefaultInstance, extensionRegistry);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.fromPos_, global::Position.DefaultInstance, extensionRegistry);
            break;
          }
          case 26: {
            input.ReadMessageArray(tag, field_name, result.toPos_, global::Position.DefaultInstance, extensionRegistry);
            break;
          }
          case 34:
          case 37: {
            input.ReadFloatArray(tag, field_name, result.speed_);
            break;
          }
          case 42: {
            input.ReadMessageArray(tag, field_name, result.playMotion_, global::MotionInfo.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::IdentifyInfo> IdentifyList {
      get { return PrepareBuilder().identify_; }
    }
    public int IdentifyCount {
      get { return result.IdentifyCount; }
    }
    public global::IdentifyInfo GetIdentify(int index) {
      return result.GetIdentify(index);
    }
    public Builder SetIdentify(int index, global::IdentifyInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.identify_[index] = value;
      return this;
    }
    public Builder SetIdentify(int index, global::IdentifyInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.identify_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddIdentify(global::IdentifyInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.identify_.Add(value);
      return this;
    }
    public Builder AddIdentify(global::IdentifyInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.identify_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeIdentify(scg::IEnumerable<global::IdentifyInfo> values) {
      PrepareBuilder();
      result.identify_.Add(values);
      return this;
    }
    public Builder ClearIdentify() {
      PrepareBuilder();
      result.identify_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::Position> FromPosList {
      get { return PrepareBuilder().fromPos_; }
    }
    public int FromPosCount {
      get { return result.FromPosCount; }
    }
    public global::Position GetFromPos(int index) {
      return result.GetFromPos(index);
    }
    public Builder SetFromPos(int index, global::Position value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.fromPos_[index] = value;
      return this;
    }
    public Builder SetFromPos(int index, global::Position.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.fromPos_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddFromPos(global::Position value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.fromPos_.Add(value);
      return this;
    }
    public Builder AddFromPos(global::Position.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.fromPos_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeFromPos(scg::IEnumerable<global::Position> values) {
      PrepareBuilder();
      result.fromPos_.Add(values);
      return this;
    }
    public Builder ClearFromPos() {
      PrepareBuilder();
      result.fromPos_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::Position> ToPosList {
      get { return PrepareBuilder().toPos_; }
    }
    public int ToPosCount {
      get { return result.ToPosCount; }
    }
    public global::Position GetToPos(int index) {
      return result.GetToPos(index);
    }
    public Builder SetToPos(int index, global::Position value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.toPos_[index] = value;
      return this;
    }
    public Builder SetToPos(int index, global::Position.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.toPos_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddToPos(global::Position value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.toPos_.Add(value);
      return this;
    }
    public Builder AddToPos(global::Position.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.toPos_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeToPos(scg::IEnumerable<global::Position> values) {
      PrepareBuilder();
      result.toPos_.Add(values);
      return this;
    }
    public Builder ClearToPos() {
      PrepareBuilder();
      result.toPos_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<float> SpeedList {
      get { return PrepareBuilder().speed_; }
    }
    public int SpeedCount {
      get { return result.SpeedCount; }
    }
    public float GetSpeed(int index) {
      return result.GetSpeed(index);
    }
    public Builder SetSpeed(int index, float value) {
      PrepareBuilder();
      result.speed_[index] = value;
      return this;
    }
    public Builder AddSpeed(float value) {
      PrepareBuilder();
      result.speed_.Add(value);
      return this;
    }
    public Builder AddRangeSpeed(scg::IEnumerable<float> values) {
      PrepareBuilder();
      result.speed_.Add(values);
      return this;
    }
    public Builder ClearSpeed() {
      PrepareBuilder();
      result.speed_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::MotionInfo> PlayMotionList {
      get { return PrepareBuilder().playMotion_; }
    }
    public int PlayMotionCount {
      get { return result.PlayMotionCount; }
    }
    public global::MotionInfo GetPlayMotion(int index) {
      return result.GetPlayMotion(index);
    }
    public Builder SetPlayMotion(int index, global::MotionInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.playMotion_[index] = value;
      return this;
    }
    public Builder SetPlayMotion(int index, global::MotionInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.playMotion_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddPlayMotion(global::MotionInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.playMotion_.Add(value);
      return this;
    }
    public Builder AddPlayMotion(global::MotionInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.playMotion_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangePlayMotion(scg::IEnumerable<global::MotionInfo> values) {
      PrepareBuilder();
      result.playMotion_.Add(values);
      return this;
    }
    public Builder ClearPlayMotion() {
      PrepareBuilder();
      result.playMotion_.Clear();
      return this;
    }
  }
  static ItemMoveEvent() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ItemCraateEvent : pb::GeneratedMessage<ItemCraateEvent, ItemCraateEvent.Builder> {
  private ItemCraateEvent() { }
  private static readonly ItemCraateEvent defaultInstance = new ItemCraateEvent().MakeReadOnly();
  private static readonly string[] _itemCraateEventFieldNames = new string[] { "item" };
  private static readonly uint[] _itemCraateEventFieldTags = new uint[] { 10 };
  public static ItemCraateEvent DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ItemCraateEvent DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ItemCraateEvent ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_ItemCraateEvent__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ItemCraateEvent, ItemCraateEvent.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_ItemCraateEvent__FieldAccessorTable; }
  }
  
  public const int ItemFieldNumber = 1;
  private pbc::PopsicleList<global::Item> item_ = new pbc::PopsicleList<global::Item>();
  public scg::IList<global::Item> ItemList {
    get { return item_; }
  }
  public int ItemCount {
    get { return item_.Count; }
  }
  public global::Item GetItem(int index) {
    return item_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::Item element in ItemList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _itemCraateEventFieldNames;
    if (item_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], item_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::Item element in ItemList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ItemCraateEvent ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ItemCraateEvent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ItemCraateEvent ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ItemCraateEvent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ItemCraateEvent ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ItemCraateEvent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ItemCraateEvent ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ItemCraateEvent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ItemCraateEvent ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ItemCraateEvent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ItemCraateEvent MakeReadOnly() {
    item_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ItemCraateEvent prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ItemCraateEvent, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ItemCraateEvent cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ItemCraateEvent result;
    
    private ItemCraateEvent PrepareBuilder() {
      if (resultIsReadOnly) {
        ItemCraateEvent original = result;
        result = new ItemCraateEvent();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ItemCraateEvent MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ItemCraateEvent.Descriptor; }
    }
    
    public override ItemCraateEvent DefaultInstanceForType {
      get { return global::ItemCraateEvent.DefaultInstance; }
    }
    
    public override ItemCraateEvent BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ItemCraateEvent) {
        return MergeFrom((ItemCraateEvent) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ItemCraateEvent other) {
      if (other == global::ItemCraateEvent.DefaultInstance) return this;
      PrepareBuilder();
      if (other.item_.Count != 0) {
        result.item_.Add(other.item_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_itemCraateEventFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _itemCraateEventFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.item_, global::Item.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::Item> ItemList {
      get { return PrepareBuilder().item_; }
    }
    public int ItemCount {
      get { return result.ItemCount; }
    }
    public global::Item GetItem(int index) {
      return result.GetItem(index);
    }
    public Builder SetItem(int index, global::Item value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.item_[index] = value;
      return this;
    }
    public Builder SetItem(int index, global::Item.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.item_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddItem(global::Item value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.item_.Add(value);
      return this;
    }
    public Builder AddItem(global::Item.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.item_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeItem(scg::IEnumerable<global::Item> values) {
      PrepareBuilder();
      result.item_.Add(values);
      return this;
    }
    public Builder ClearItem() {
      PrepareBuilder();
      result.item_.Clear();
      return this;
    }
  }
  static ItemCraateEvent() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ItemDestroyEvent : pb::GeneratedMessage<ItemDestroyEvent, ItemDestroyEvent.Builder> {
  private ItemDestroyEvent() { }
  private static readonly ItemDestroyEvent defaultInstance = new ItemDestroyEvent().MakeReadOnly();
  private static readonly string[] _itemDestroyEventFieldNames = new string[] { "identify" };
  private static readonly uint[] _itemDestroyEventFieldTags = new uint[] { 10 };
  public static ItemDestroyEvent DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ItemDestroyEvent DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ItemDestroyEvent ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_ItemDestroyEvent__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ItemDestroyEvent, ItemDestroyEvent.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_ItemDestroyEvent__FieldAccessorTable; }
  }
  
  public const int IdentifyFieldNumber = 1;
  private pbc::PopsicleList<global::IdentifyInfo> identify_ = new pbc::PopsicleList<global::IdentifyInfo>();
  public scg::IList<global::IdentifyInfo> IdentifyList {
    get { return identify_; }
  }
  public int IdentifyCount {
    get { return identify_.Count; }
  }
  public global::IdentifyInfo GetIdentify(int index) {
    return identify_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::IdentifyInfo element in IdentifyList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _itemDestroyEventFieldNames;
    if (identify_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], identify_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::IdentifyInfo element in IdentifyList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ItemDestroyEvent ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ItemDestroyEvent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ItemDestroyEvent ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ItemDestroyEvent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ItemDestroyEvent ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ItemDestroyEvent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ItemDestroyEvent ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ItemDestroyEvent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ItemDestroyEvent ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ItemDestroyEvent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ItemDestroyEvent MakeReadOnly() {
    identify_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ItemDestroyEvent prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ItemDestroyEvent, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ItemDestroyEvent cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ItemDestroyEvent result;
    
    private ItemDestroyEvent PrepareBuilder() {
      if (resultIsReadOnly) {
        ItemDestroyEvent original = result;
        result = new ItemDestroyEvent();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ItemDestroyEvent MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ItemDestroyEvent.Descriptor; }
    }
    
    public override ItemDestroyEvent DefaultInstanceForType {
      get { return global::ItemDestroyEvent.DefaultInstance; }
    }
    
    public override ItemDestroyEvent BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ItemDestroyEvent) {
        return MergeFrom((ItemDestroyEvent) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ItemDestroyEvent other) {
      if (other == global::ItemDestroyEvent.DefaultInstance) return this;
      PrepareBuilder();
      if (other.identify_.Count != 0) {
        result.identify_.Add(other.identify_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_itemDestroyEventFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _itemDestroyEventFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.identify_, global::IdentifyInfo.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::IdentifyInfo> IdentifyList {
      get { return PrepareBuilder().identify_; }
    }
    public int IdentifyCount {
      get { return result.IdentifyCount; }
    }
    public global::IdentifyInfo GetIdentify(int index) {
      return result.GetIdentify(index);
    }
    public Builder SetIdentify(int index, global::IdentifyInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.identify_[index] = value;
      return this;
    }
    public Builder SetIdentify(int index, global::IdentifyInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.identify_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddIdentify(global::IdentifyInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.identify_.Add(value);
      return this;
    }
    public Builder AddIdentify(global::IdentifyInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.identify_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeIdentify(scg::IEnumerable<global::IdentifyInfo> values) {
      PrepareBuilder();
      result.identify_.Add(values);
      return this;
    }
    public Builder ClearIdentify() {
      PrepareBuilder();
      result.identify_.Clear();
      return this;
    }
  }
  static ItemDestroyEvent() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CharacterCreateEvent : pb::GeneratedMessage<CharacterCreateEvent, CharacterCreateEvent.Builder> {
  private CharacterCreateEvent() { }
  private static readonly CharacterCreateEvent defaultInstance = new CharacterCreateEvent().MakeReadOnly();
  private static readonly string[] _characterCreateEventFieldNames = new string[] { "character" };
  private static readonly uint[] _characterCreateEventFieldTags = new uint[] { 10 };
  public static CharacterCreateEvent DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CharacterCreateEvent DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CharacterCreateEvent ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_CharacterCreateEvent__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CharacterCreateEvent, CharacterCreateEvent.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_CharacterCreateEvent__FieldAccessorTable; }
  }
  
  public const int CharacterFieldNumber = 1;
  private pbc::PopsicleList<global::Character> character_ = new pbc::PopsicleList<global::Character>();
  public scg::IList<global::Character> CharacterList {
    get { return character_; }
  }
  public int CharacterCount {
    get { return character_.Count; }
  }
  public global::Character GetCharacter(int index) {
    return character_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::Character element in CharacterList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _characterCreateEventFieldNames;
    if (character_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], character_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::Character element in CharacterList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CharacterCreateEvent ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CharacterCreateEvent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CharacterCreateEvent ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CharacterCreateEvent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CharacterCreateEvent ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CharacterCreateEvent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CharacterCreateEvent ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CharacterCreateEvent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CharacterCreateEvent ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CharacterCreateEvent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CharacterCreateEvent MakeReadOnly() {
    character_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CharacterCreateEvent prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CharacterCreateEvent, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CharacterCreateEvent cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CharacterCreateEvent result;
    
    private CharacterCreateEvent PrepareBuilder() {
      if (resultIsReadOnly) {
        CharacterCreateEvent original = result;
        result = new CharacterCreateEvent();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CharacterCreateEvent MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CharacterCreateEvent.Descriptor; }
    }
    
    public override CharacterCreateEvent DefaultInstanceForType {
      get { return global::CharacterCreateEvent.DefaultInstance; }
    }
    
    public override CharacterCreateEvent BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CharacterCreateEvent) {
        return MergeFrom((CharacterCreateEvent) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CharacterCreateEvent other) {
      if (other == global::CharacterCreateEvent.DefaultInstance) return this;
      PrepareBuilder();
      if (other.character_.Count != 0) {
        result.character_.Add(other.character_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_characterCreateEventFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _characterCreateEventFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.character_, global::Character.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::Character> CharacterList {
      get { return PrepareBuilder().character_; }
    }
    public int CharacterCount {
      get { return result.CharacterCount; }
    }
    public global::Character GetCharacter(int index) {
      return result.GetCharacter(index);
    }
    public Builder SetCharacter(int index, global::Character value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.character_[index] = value;
      return this;
    }
    public Builder SetCharacter(int index, global::Character.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.character_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddCharacter(global::Character value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.character_.Add(value);
      return this;
    }
    public Builder AddCharacter(global::Character.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.character_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeCharacter(scg::IEnumerable<global::Character> values) {
      PrepareBuilder();
      result.character_.Add(values);
      return this;
    }
    public Builder ClearCharacter() {
      PrepareBuilder();
      result.character_.Clear();
      return this;
    }
  }
  static CharacterCreateEvent() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CharacterMove : pb::GeneratedMessage<CharacterMove, CharacterMove.Builder> {
  private CharacterMove() { }
  private static readonly CharacterMove defaultInstance = new CharacterMove().MakeReadOnly();
  private static readonly string[] _characterMoveFieldNames = new string[] { "ticket", "toPos" };
  private static readonly uint[] _characterMoveFieldTags = new uint[] { 10, 18 };
  public static CharacterMove DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CharacterMove DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CharacterMove ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_CharacterMove__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CharacterMove, CharacterMove.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_CharacterMove__FieldAccessorTable; }
  }
  
  public const int TicketFieldNumber = 1;
  private bool hasTicket;
  private string ticket_ = "";
  public bool HasTicket {
    get { return hasTicket; }
  }
  public string Ticket {
    get { return ticket_; }
  }
  
  public const int ToPosFieldNumber = 2;
  private bool hasToPos;
  private global::Position toPos_;
  public bool HasToPos {
    get { return hasToPos; }
  }
  public global::Position ToPos {
    get { return toPos_ ?? global::Position.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasTicket) return false;
      if (!hasToPos) return false;
      if (!ToPos.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _characterMoveFieldNames;
    if (hasTicket) {
      output.WriteString(1, field_names[0], Ticket);
    }
    if (hasToPos) {
      output.WriteMessage(2, field_names[1], ToPos);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasTicket) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Ticket);
    }
    if (hasToPos) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, ToPos);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CharacterMove ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CharacterMove ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CharacterMove ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CharacterMove ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CharacterMove ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CharacterMove ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CharacterMove ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CharacterMove ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CharacterMove ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CharacterMove ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CharacterMove MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CharacterMove prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CharacterMove, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CharacterMove cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CharacterMove result;
    
    private CharacterMove PrepareBuilder() {
      if (resultIsReadOnly) {
        CharacterMove original = result;
        result = new CharacterMove();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CharacterMove MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CharacterMove.Descriptor; }
    }
    
    public override CharacterMove DefaultInstanceForType {
      get { return global::CharacterMove.DefaultInstance; }
    }
    
    public override CharacterMove BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CharacterMove) {
        return MergeFrom((CharacterMove) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CharacterMove other) {
      if (other == global::CharacterMove.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasTicket) {
        Ticket = other.Ticket;
      }
      if (other.HasToPos) {
        MergeToPos(other.ToPos);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_characterMoveFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _characterMoveFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasTicket = input.ReadString(ref result.ticket_);
            break;
          }
          case 18: {
            global::Position.Builder subBuilder = global::Position.CreateBuilder();
            if (result.hasToPos) {
              subBuilder.MergeFrom(ToPos);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ToPos = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasTicket {
      get { return result.hasTicket; }
    }
    public string Ticket {
      get { return result.Ticket; }
      set { SetTicket(value); }
    }
    public Builder SetTicket(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTicket = true;
      result.ticket_ = value;
      return this;
    }
    public Builder ClearTicket() {
      PrepareBuilder();
      result.hasTicket = false;
      result.ticket_ = "";
      return this;
    }
    
    public bool HasToPos {
     get { return result.hasToPos; }
    }
    public global::Position ToPos {
      get { return result.ToPos; }
      set { SetToPos(value); }
    }
    public Builder SetToPos(global::Position value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasToPos = true;
      result.toPos_ = value;
      return this;
    }
    public Builder SetToPos(global::Position.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasToPos = true;
      result.toPos_ = builderForValue.Build();
      return this;
    }
    public Builder MergeToPos(global::Position value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasToPos &&
          result.toPos_ != global::Position.DefaultInstance) {
          result.toPos_ = global::Position.CreateBuilder(result.toPos_).MergeFrom(value).BuildPartial();
      } else {
        result.toPos_ = value;
      }
      result.hasToPos = true;
      return this;
    }
    public Builder ClearToPos() {
      PrepareBuilder();
      result.hasToPos = false;
      result.toPos_ = null;
      return this;
    }
  }
  static CharacterMove() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

#endregion

#region Services
/*
* Service generation is now disabled by default, use the following option to enable:
* option (google.protobuf.csharp_file_options).service_generator_type = GENERIC;
*/
/*
* Service generation is now disabled by default, use the following option to enable:
* option (google.protobuf.csharp_file_options).service_generator_type = GENERIC;
*/
#endregion


#endregion Designer generated code
