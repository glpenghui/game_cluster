
option java_package = "com.mmo.server";
option java_outer_classname = "ServerClientProtocol";
option java_generic_services = true;
option java_generate_equals_and_hash = true;


/* Enumerations */

enum LoginCode {
    SUC = 0;
   	ERROR_PWD = 1;
   	OCCUPIED = 2;
   	NOT_EXIST = 3;
}

enum ClientCommonStat {
	OK = 0;
	ERROR = 1;
}

enum ClientItemType {
	BUILD = 0;
	MATERIAL = 1;
}

/* Basically Informations */

message ClientPosition {
	required float posX = 1;
	required float posY = 2;
	required float posZ = 3;
	
}

message ClientModInfo {
	required int32 modId = 1;
	required int32 motion = 2;
	required int32 orientation = 3;
}

message ClientMotionInfo {
	required int32 motion = 1;
	required int32 efficacy = 2;
	required float speed = 3;
}

message ClientSurvivalInfo {
	required int32 health = 1;
	required int32 hunger = 2;
	required int32 spirit = 3;
	required int32 comfort = 4;
}

message ClientEnergyInfo {
	required int32 strength = 1;
	required int32 endurance = 2;
	required int32 agility = 3;
	required int32 defence = 4;
}

message CharacterEquipMod {
	required ClientModInfo hair = 1;
	required ClientModInfo face = 2;
	required ClientModInfo pants = 3;
	required ClientModInfo shoes = 4;
	required ClientModInfo top = 5;
	required ClientModInfo body = 6;
	required ClientModInfo wrist = 7;
	required ClientModInfo leftHold = 8;
	required ClientModInfo rightHold = 9;
}


message ClientIdentifyInfo {
	required int32 ID = 1;
	required string name = 2;
	optional ClientItemType type = 3;
}

/* Basically Objects */

message ClientItem {
	required ClientIdentifyInfo identify = 1;
	required ClientPosition position = 2;
	required ClientModInfo modInfo = 3;
	required ClientSurvivalInfo survivalInfo= 4;
}


message ClientCharacter {
	required ClientIdentifyInfo identify = 1;
	required ClientPosition position = 2;
	optional ClientModInfo modInfo = 3;
	optional ClientSurvivalInfo survivalInfo= 4;
	required int32 mapId = 5;
	optional ClientEnergyInfo energyInfo = 6;
	optional CharacterEquipMod equipMod = 7;
}


/* Accounts */

message ClientCommonResponse {
	required ClientCommonStat stat = 1;
}


message UserLoginRequest {
	required string uname = 1;
	required string upwd = 2;
}

message UserLoginResponse {
	required LoginCode code = 1;
	optional string ticket = 2;
	optional ClientCharacter character = 3;
}

message UserLogoutRequest {
	required string ticket = 1;
}

message UserLogoutResponse {
	required LoginCode code = 1;
}

message GetCharacterInfoRequest {
	required string ticket = 1;
}

message GetCharacterInfoResponse {
	required ClientCharacter character = 1;
}

message ClientCharacterEnterRequest {
	required string ticket = 1;
}
/* Enter map */
message ClientCharacterEnterEvent {
	required ClientCommonStat stat = 1;
	required int32 mapId = 2;
	repeated ClientItem mapItems = 3;
	repeated ClientCharacter mapCharacters = 4;
}

/* Item Events */

message ClientItemMoveEvent {
	required ClientIdentifyInfo identify = 1;
	required ClientPosition fromPos = 2;
	required ClientPosition toPos = 3;
	required float speed = 4;
	required ClientMotionInfo playMotion = 5;
}

message ClientItemCreateEvent {
	required ClientItem item = 1;
}

message ClientItemDestroyEvent {
	required ClientIdentifyInfo identify = 1;
}

/* Character Event */

message ClientCharacterCreateEvent {
	required ClientCharacter character = 1;
}


/* Controls */


message ClientCharacterMove {
	required string ticket = 1;
	required ClientPosition toPos = 2;
}


/* Services Definition */

service ServerGateService {
	rpc userLogin (UserLoginRequest) returns (UserLoginResponse) {}
	rpc userLogout (UserLogoutRequest) returns (UserLogoutResponse) {}
	rpc getCharacter (GetCharacterInfoRequest) returns (GetCharacterInfoResponse) {}
}

service ClientSideService {
	rpc moveTo (ClientCharacterMove) returns (ClientCommonResponse) {}
}
